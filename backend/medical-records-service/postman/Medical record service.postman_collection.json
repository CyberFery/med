{
	"info": {
		"_postman_id": "c0da7ab5-17f6-40b9-8870-6798a85cc444",
		"name": "Medical record service",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20373260"
	},
	"item": [
		{
			"name": "get all medical records",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/medical-records",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"medical-records"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "get medical record",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"healthInsuranceNumber\": \"ABCD123456789\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8083/medical-records/medical-record",
					"host": [
						"localhost"
					],
					"port": "8083",
					"path": [
						"medical-records",
						"medical-record"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "create medical record",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"patient\": {\n        \"firstName\": \"Pierre\",\n        \"lastName\": \"Johnson\",\n        \"healthInsuranceNumber\": \"ABCD123456789\",\n        \"dateOfBirth\": \"2024-03-14T22:31:29.872Z\",\n        \"genre\": \"MALE\",\n        \"establishedDiagnosis\": \"cancer\",\n        \"knownParentList\": [\n            {\n                \"firstName\": \"Manou\",\n                \"lastName\": \"Ouellet\"\n            }\n        ],\n        \"cityOfBirth\": \"Montreal\",\n        \"contactInformation\": {\n            \"residentialAddressList\": [\n                {\n                    \"address\": \"4444 Rue poirier MontrÃ©al H5Y 9U8\"\n                }\n            ],\n            \"phoneNumberList\": [\n                {\n                    \"number\": \"5149947899\"\n                }\n            ],\n            \"emailAddressList\": [\n                {\n                    \"email\": \"johnson@gmail.com\"\n                }\n            ]\n        },\n        \"isHealthcareProfessional\": false,\n        \"isDoctor\": false\n    },\n    \"medicalVisitList\": [\n        {\n            \"visitedEstablishment\": \"hopital1\",\n            \"doctorId\" : 1,\n            \"visitDate\": \"2024-03-14T22:31:29.872Z\",\n            \"diagnosisList\": [\n                {\n                    \"description\": \"description\",\n                    \"treatment\": \"treatement1\"\n                }\n            ],\n            \"summaryOfTheVisitByDoctor\": \"summery\",\n            \"notesForOtherDoctors\": \"note1\"\n        }\n    ],\n    \"medicalHistoryList\": [\n        {\n            \"diagnosis\": \"Common cold\",\n            \"treatment\": \"Rest and fluids\",\n            \"illnessList\": [\n                {\n                    \"description\": \"Fever\",\n                    \"onsetOfIllnessDate\": \"2024-03-14T22:31:29.872Z\",\n                    \"endOfIllnessDate\": \"2024-03-14T22:31:29.872Z\"\n                }\n            ],\n            \"doctorId\" : 1\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8083/medical-records/medical-record",
					"host": [
						"localhost"
					],
					"port": "8083",
					"path": [
						"medical-records",
						"medical-record"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "update contact information",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"healthInsuranceNumber\": \"ABCD123456789\",\n    \"contactInformation\": {\n            \"residentialAddressList\": [\n                {\n                    \"address\": \"4444 Rue poirier MontrÃ©al H5Y 9U8\"\n                }\n            ],\n            \"phoneNumberList\": [\n                {\n                    \"number\": \"5149947899\"\n                }\n            ],\n            \"emailAddressList\": [\n                {\n                    \"email\": \"johnson@gmail.com\"\n                }\n            ]\n        }\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8083/medical-records/update-contact-information",
					"host": [
						"localhost"
					],
					"port": "8083",
					"path": [
						"medical-records",
						"update-contact-information"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "update medical visit",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n            \"healthInsuranceNumber\": \"ABCD123456789\",\n            \"medicalVisit\": {\n                \"visitedEstablishment\": \"hopital1\",\n                \"doctorSeen\": {\n                    \"firstName\": \"Emily\",\n                    \"lastName\": \"Smith\",\n                    \"specialization\": \"General Physician\"\n                },\n                \"visitDate\": \"2024-03-14T22:31:29.872Z\",\n                \"diagnosisList\": [\n                    {\n                        \"description\": \"description\",\n                        \"treatment\": \"treatement1\"\n                    }\n                ],\n                \"summaryOfTheVisitByDoctor\": \"noted\",\n                \"notesForOtherDoctors\": \"note1\"\n            }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8083/medical-records/update-medical-visit",
					"host": [
						"localhost"
					],
					"port": "8083",
					"path": [
						"medical-records",
						"update-medical-visit"
					]
				}
			},
			"response": []
		},
		{
			"name": "update medical history",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\"healthInsuranceNumber\" : \"ABCD123456789\",\n  \"medicalHistory\": { \n            \"diagnosis\": \"Common cold, fever\",\n            \"treatment\": \"Rest and fluids\",\n            \"illnessList\": [\n                {\n                    \"description\": \"Fever\",\n                    \"onsetOfIllnessDate\": \"2024-03-14T22:31:29.872Z\",\n                    \"endOfIllnessDate\": \"2024-03-14T22:31:29.872Z\"\n                }\n            ],\n            \"primaryCareDoctor\": {\n                \"firstName\": \"Emily\",\n                \"lastName\": \"Smith\",\n                \"specialization\": \"General Physician\"\n            }\n        }\n }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8083/medical-records/update-medical-history",
					"host": [
						"localhost"
					],
					"port": "8083",
					"path": [
						"medical-records",
						"update-medical-history"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		},
		{
			"key": "healthInsuranceNumber",
			"value": "12345678",
			"type": "string"
		}
	]
}